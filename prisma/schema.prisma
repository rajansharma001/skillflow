// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          String @default("user")
  accounts      Account[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course Course[] @relation(name: "UserCourses")
  enroll Enroll[] 
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation( fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model CourseCategory{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String? @unique
  slug String? @unique
  createdAT DateTime @default(now())
  updatedAt DateTime @updatedAt
  course Course[]
}

model Course{
id String @id @default(auto()) @map("_id") @db.ObjectId
title String?
slug String?
description String?
thumbnailUrl String?
price String?
isFree Boolean @default(true)
level String?
language String?
duration String?
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
authorId String @db.ObjectId 
user User @relation( fields: [authorId], references:[id], name: "UserCourses")
category_id String @db.ObjectId 
category CourseCategory @relation(fields: [category_id], references: [id] )
published Boolean @default(false)
previewVideoUrl String?
learningOutcomes String?
enrollmentCount String?
rating String?
lesson Lesson[]
enroll Enroll[] 
}


model Lesson{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String?
  slug String?
  videoUrl String?
  videoLength String?
  courseId String @db.ObjectId 
  course Course @relation(fields: [courseId], references: [id])
  isFree Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  summary String?
  resources String?
}

model Enroll{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  courseId String @db.ObjectId
  course Course @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}